<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
      background: #f0f0f0;
    }
    .game {
      text-align: center;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
      margin: 20px auto;
    }
    .cell {
      width: 100px;
      height: 100px;
      background: white;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2em;
      cursor: pointer;
      border: 2px solid #333;
    }
    .cell:hover {
      background: #f9f9f9;
    }
    .status {
      font-size: 1.2em;
      margin: 10px 0;
    }
    button {
      padding: 10px 20px;
      font-size: 1em;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <div class="game">
    <h1>Tic-Tac-Toe vs Computer</h1>
    <div class="status" id="status">Your turn (X)</div>
    <div class="board" id="board"></div>
    <button onclick="resetGame()">Restart</button>
  </div>

  <script>
    const board = document.getElementById("board");
    const statusText = document.getElementById("status");
    let cells = [];
    let gameState = ["", "", "", "", "", "", "", "", ""];
    let isPlayerTurn = true;
    let gameActive = true;

    const winConditions = [
      [0,1,2], [3,4,5], [6,7,8], // rows
      [0,3,6], [1,4,7], [2,5,8], // cols
      [0,4,8], [2,4,6]           // diagonals
    ];

    function createBoard() {
      board.innerHTML = "";
      cells = [];
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        cell.dataset.index = i;
        cell.addEventListener("click", handleCellClick);
        board.appendChild(cell);
        cells.push(cell);
      }
    }

    function handleCellClick(e) {
      const idx = e.target.dataset.index;
      if (!gameState[idx] && isPlayerTurn && gameActive) {
        makeMove(idx, "X");
        if (checkWin("X")) {
          statusText.textContent = "You win! ðŸŽ‰";
          gameActive = false;
          return;
        } else if (isDraw()) {
          statusText.textContent = "It's a draw!";
          gameActive = false;
          return;
        }
        isPlayerTurn = false;
        statusText.textContent = "Computer's turn (O)...";
        setTimeout(computerMove, 500);
      }
    }

    function makeMove(index, player) {
      gameState[index] = player;
      cells[index].textContent = player;
    }

    function computerMove() {
      if (!gameActive) return;
      let available = gameState
        .map((val, idx) => (val === "" ? idx : null))
        .filter(idx => idx !== null);

      if (available.length === 0) return;

      // Random move
      const move = available[Math.floor(Math.random() * available.length)];
      makeMove(move, "O");

      if (checkWin("O")) {
        statusText.textContent = "Computer wins! ðŸ’»";
        gameActive = false;
      } else if (isDraw()) {
        statusText.textContent = "It's a draw!";
        gameActive = false;
      } else {
        isPlayerTurn = true;
        statusText.textContent = "Your turn (X)";
      }
    }

    function checkWin(player) {
      return winConditions.some(combination =>
        combination.every(index => gameState[index] === player)
      );
    }

    function isDraw() {
      return gameState.every(cell => cell !== "");
    }

    function resetGame() {
      gameState = ["", "", "", "", "", "", "", "", ""];
      isPlayerTurn = true;
      gameActive = true;
      statusText.textContent = "Your turn (X)";
      createBoard();
    }

    createBoard();
  </script>
</body>
</html>
